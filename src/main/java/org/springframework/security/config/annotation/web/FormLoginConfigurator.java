/*
 * Copyright 2002-2013 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.springframework.security.config.annotation.web;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.security.authentication.AuthenticationDetailsSource;
import org.springframework.security.web.AuthenticationEntryPoint;
import org.springframework.security.web.PortMapper;
import org.springframework.security.web.authentication.AuthenticationFailureHandler;
import org.springframework.security.web.authentication.AuthenticationSuccessHandler;
import org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint;
import org.springframework.security.web.authentication.RememberMeServices;
import org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.security.web.authentication.session.SessionAuthenticationStrategy;

/**
 * Adds form based authentication. All attributes have reasonable defaults
 * making all parameters are optional. If no {@link #loginPage(String)} is
 * specified, a default login page will be generated by the framework.
 *
 * <h2>Security Filters</h2>
 *
 * The following Filters are populated
 *
 * <ul>
 * <li>
 * {@link UsernamePasswordAuthenticationFilter}
 * </li>
 * </ul>
 *
 * <h2>Shared Objects Created</h2>
 *
 * The following shared objects are populated
 *
 * <ul>
 * <li>
 * <li>{@link HttpConfiguration#authenticationEntryPoint(AuthenticationEntryPoint)}</li>
 * </li>
 * </ul>
 *
 * <h2>Shared Objects Used</h2>
 *
 * The following shared objects are used:
 *
 * <ul>
 * <li>{@link HttpConfiguration#authenticationManager()}</li>
 * <li>{@link RememberMeServices} - is optionally used. See {@link RememberMeConfigurator}</li>
 * <li>{@link SessionAuthenticationStrategy} - is optionally used. See {@link SessionManagementConfigurator}</li>
 * </ul>
 *
 * @author Rob Winch
 * @since 3.2
 */
public final class FormLoginConfigurator extends BaseHttpConfigurator {
    private UsernamePasswordAuthenticationFilter usernamePasswordFilter = new UsernamePasswordAuthenticationFilter() {
        @Override
        protected boolean requiresAuthentication(HttpServletRequest request, HttpServletResponse response) {
            return "POST".equals(request.getMethod()) && super.requiresAuthentication(request, response);
        }
    };

    private AuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource;
    private AuthenticationSuccessHandler successHandler = new SavedRequestAwareAuthenticationSuccessHandler();
    private LoginUrlAuthenticationEntryPoint authenticationEntryPoint;
    private AuthenticationFailureHandler failureHandler;
    private boolean permitAll;
    private boolean customLoginPage;
    private String loginPage;
    private String loginProcessingUrl;
    private String failureUrl;

    /**
     * Creates a new instance
     * @see HttpConfiguration#formLogin()
     */
    FormLoginConfigurator() {
        loginUrl("/login");
        failureUrl("/login?error");
        usernameParameter("username");
        passwordParameter("password");
        this.customLoginPage = false;
    }

    /**
     * <p>
     * Specifies the URL to send users to if login is required. If used with
     * {@link WebSecurityConfigurerAdapter} a default login page will be
     * generated when this attribute is not specified.
     * </p>
     *
     * <p>
     * If a URL is specified or this is not being used in conjuction with
     * {@link WebSecurityConfigurerAdapter}, users are required to process the
     * specified URL to generate a login page. In general, the login page should
     * create a form that submits a request with the following requirements to
     * work with {@link UsernamePasswordAuthenticationFilter}:
     * </p>
     *
     * <ul>
     * <li>It must be an HTTP POST</li>
     * <li>It must be submitted to {@link #loginProcessingUrl(String)}</li>
     * <li>It should include the username as an HTTP parameter by the name of
     * {@link #usernameParameter(String)}</li>
     * <li>It should include the password as an HTTP parameter by the name of
     * {@link #passwordParameter(String)}</li>
     * </ul>
     *
     * <h2>Example login.jsp</h2>
     *
     * Login pages can be rendered with any technology you choose so long as the
     * rules above are followed. Below is an example login.jsp that can be used as
     * a quick start when using JSP's or as a baseline to translate into another view
     * technology.
     *
     * <pre>
     * <!-- loginProcessingUrl should correspond to FormLoginConfigurator#loginProcessingUrl. Don't forget to perform a POST -->
     * &lt;c:url value="/login" var="loginProcessingUrl"/&gt;
     * &lt;form action="${loginProcessingUrl}" method="post"&gt;
     *    &lt;fieldset&gt;
     *        &lt;legend&gt;Please Login&lt;/legend&gt;
     *        &lt;!-- use param.error assuming FormLoginConfigurator#failureUrl contains the query parameter error --&gt;
     *        &lt;c:if test="${param.error != null}"&gt;
     *            &lt;div&gt;
     *                Failed to login.
     *                &lt;c:if test="${SPRING_SECURITY_LAST_EXCEPTION != null}"&gt;
     *                  Reason: &lt;c:out value="${SPRING_SECURITY_LAST_EXCEPTION.message}" /&gt;
     *                &lt;/c:if&gt;
     *            &lt;/div&gt;
     *        &lt;/c:if&gt;
     *        &lt;!-- the configured LogoutConfigurator#logoutSuccessUrl is /login?logout and contains the query param logout --&gt;
     *        &lt;c:if test="${param.logout != null}"&gt;
     *            &lt;div&gt;
     *                You have been logged out.
     *            &lt;/div&gt;
     *        &lt;/c:if&gt;
     *        &lt;p&gt;
     *        &lt;label for="username"&gt;Username&lt;/label&gt;
     *        &lt;input type="text" id="username" name="username"/&gt;
     *        &lt;/p&gt;
     *        &lt;p&gt;
     *        &lt;label for="password"&gt;Password&lt;/label&gt;
     *        &lt;input type="password" id="password" name="password"/&gt;
     *        &lt;/p&gt;
     *        &lt;!-- if using RememberMeConfigurator make sure remember-me matches RememberMeConfigurator#rememberMeParameter --&gt;
     *        &lt;p&gt;
     *        &lt;label for="remember-me"&gt;Remember Me?&lt;/label&gt;
     *        &lt;input type="checkbox" id="remember-me" name="remember-me"/&gt;
     *        &lt;/p&gt;
     *        &lt;div&gt;
     *            &lt;button type="submit" class="btn"&gt;Log in&lt;/button&gt;
     *        &lt;/div&gt;
     *    &lt;/fieldset&gt;
     * &lt;/form&gt;
     * </pre>
     *
     * @param loginPage
     *            the login page to redirect to if authentication is required
     *            (i.e. "/login")
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator loginPage(String loginPage) {
        this.loginPage = loginPage;
        this.authenticationEntryPoint = new LoginUrlAuthenticationEntryPoint(loginPage);
        this.customLoginPage = true;
        return this;
    }

    /**
     * Specifies a custom {@link AuthenticationDetailsSource}. The default is {@link WebAuthenticationDetailsSource}.
     *
     * @param authenticationDetailsSource the custom {@link AuthenticationDetailsSource}
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator authenticationDetailsSource(AuthenticationDetailsSource<HttpServletRequest, ?> authenticationDetailsSource) {
        this.authenticationDetailsSource = authenticationDetailsSource;
        return this;
    }

    /**
     * Specifies where users will go after authenticating successfully if they
     * have not visited a secured page prior to authenticating. This is a
     * shortcut for calling {@link #defaultSuccessUrl(String)}.
     *
     * @param defaultSuccessUrl
     *            the default success url
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator defaultSuccessUrl(String defaultSuccessUrl) {
        return defaultSuccessUrl(defaultSuccessUrl, false);
    }

    /**
     * Specifies where users will go after authenticating successfully if they
     * have not visited a secured page prior to authenticating or
     * {@code alwaysUse} is true. This is a shortcut for calling
     * {@link #successHandler(AuthenticationSuccessHandler)}.
     *
     * @param defaultSuccessUrl
     *            the default success url
     * @param alwaysUse
     *            true if the {@code defaultSuccesUrl} should be used after
     *            authentication despite if a protected page had been previously
     *            visited
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator defaultSuccessUrl(String defaultSuccessUrl, boolean alwaysUse) {
        SavedRequestAwareAuthenticationSuccessHandler handler = new SavedRequestAwareAuthenticationSuccessHandler();
        handler.setDefaultTargetUrl(defaultSuccessUrl);
        handler.setAlwaysUseDefaultTargetUrl(alwaysUse);
        return successHandler(handler);
    }

    /**
     * Specifies the {@link AuthenticationSuccessHandler} to be used. The
     * default is {@link SavedRequestAwareAuthenticationSuccessHandler} with no
     * additional properites set.
     *
     * @param successHandler
     *            the {@link AuthenticationSuccessHandler}.
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator successHandler(AuthenticationSuccessHandler successHandler) {
        this.successHandler = successHandler;
        return this;
    }

    /**
     * Specifies the URL used to log in. If the request matches the URL and is an HTTP POST, the
     * {@link UsernamePasswordAuthenticationFilter} will attempt to authenticate
     * the request. Otherwise, if the request matches the URL the user will be sent to the login form.
     *
     * @param loginUrl the URL used to perform authentication
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator loginUrl(String loginUrl) {
        loginProcessingUrl(loginUrl);
        return loginPage(loginUrl);
    }

    /**
     * Specifies the URL to validate the username and password. Note that only a
     * POST will be used to authenticate users.
     *
     * @param loginProcessingUrl
     *            the URL to validate username and password
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator loginProcessingUrl(String loginProcessingUrl) {
        this.loginProcessingUrl = loginProcessingUrl;
        usernamePasswordFilter.setFilterProcessesUrl(loginProcessingUrl);
        return this;
    }

    /**
     * The HTTP parameter to look for the username when performing
     * authentication. Default is "username".
     *
     * @param usernameParameter
     *            the HTTP parameter to look for the username when performing
     *            authentication
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator usernameParameter(String usernameParameter) {
        usernamePasswordFilter.setUsernameParameter(usernameParameter);
        return this;
    }

    /**
     * The HTTP parameter to look for the password when performing
     * authentication. Default is "password".
     *
     * @param passwordParameter
     *            the HTTP parameter to look for the password when performing
     *            authentication
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator passwordParameter(String passwordParameter) {
        usernamePasswordFilter.setPasswordParameter(passwordParameter);
        return this;
    }

    /**
     * Equivalent of invoking permitAll(true)
     * @return
     */
    public FormLoginConfigurator permitAll() {
        return permitAll(true);
    }

    /**
     * Ensures the urls for {@link #failureUrl(String)} and
     * {@link #loginUrl(String)} are granted access to any user.
     *
     * @param permitAll true to grant access to the URLs false to skip this step
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator permitAll(boolean permitAll) {
        this.permitAll = permitAll;
        return this;
    }

    /**
     * The URL to send users if authentication fails. This is a shortcut for
     * invoking {@link #failureHandler(AuthenticationFailureHandler)}. The
     * default is "/login?error".
     *
     * @param failureUrl
     *            the URL to send users if authentication fails (i.e.
     *            "/login?error").
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator failureUrl(String failureUrl) {
        this.failureUrl = failureUrl;
        return failureHandler(new SimpleUrlAuthenticationFailureHandler(failureUrl));
    }

    /**
     * Specifies the {@link AuthenticationFailureHandler} to use when
     * authentication fails. The default is redirecting to "/login?error" using
     * {@link SimpleUrlAuthenticationFailureHandler}
     *
     * @param failureHandler
     *            the {@link AuthenticationFailureHandler} to use when
     *            authentication fails.
     * @return the {@link FormLoginConfigurator} for additional customization
     */
    public FormLoginConfigurator failureHandler(AuthenticationFailureHandler failureHandler) {
        this.failureHandler = failureHandler;
        return this;
    }

    @Override
    public void init(HttpConfiguration http) throws Exception {
        if(permitAll) {
            PermitAllSupport.permitAll(http, loginPage, loginProcessingUrl, failureUrl);
        }
        http.authenticationEntryPoint(registerLifecycle(authenticationEntryPoint));
    }

    @Override
    public void configure(HttpConfiguration http) throws Exception {
        PortMapper portMapper = http.getSharedObject(PortMapper.class);
        if(portMapper != null) {
            authenticationEntryPoint.setPortMapper(portMapper);
        }

        usernamePasswordFilter.setAuthenticationManager(http.authenticationManager());
        usernamePasswordFilter.setAuthenticationSuccessHandler(successHandler);
        usernamePasswordFilter.setAuthenticationFailureHandler(failureHandler);
        if(authenticationDetailsSource != null) {
            usernamePasswordFilter.setAuthenticationDetailsSource(authenticationDetailsSource);
        }
        SessionAuthenticationStrategy sessionAuthenticationStrategy = http.getSharedObject(SessionAuthenticationStrategy.class);
        if(sessionAuthenticationStrategy != null) {
            usernamePasswordFilter.setSessionAuthenticationStrategy(sessionAuthenticationStrategy);
        }
        RememberMeServices rememberMeServices = http.getSharedObject(RememberMeServices.class);
        if(rememberMeServices != null) {
            usernamePasswordFilter.setRememberMeServices(rememberMeServices);
        }
        usernamePasswordFilter = registerLifecycle(usernamePasswordFilter);
        http.addFilter(usernamePasswordFilter);
    }

    /**
     *
     * @return true if a custom login page has been specified, else false
     */
    boolean isCustomLoginPage() {
        return customLoginPage;
    }

    /**
     * Gets the login page
     * @return the login page
     */
    String getLoginPage() {
        return loginPage;
    }

    /**
     * Gets the URL to submit an authentication request to (i.e. where
     * username/password must be submitted)
     *
     * @return the URL to submit an authentication request to
     */
    String getLoginProcessingUrl() {
        return loginProcessingUrl;
    }

    /**
     * Gets the URL to send users to if authentication fails
     * @return
     */
    String getFailureUrl() {
        return failureUrl;
    }

    /**
     * Gets the HTTP parameter that is used to submit the username.
     *
     * @return the HTTP parameter that is used to submit the username
     */
    String getUsernameParameter() {
        return usernamePasswordFilter.getUsernameParameter();
    }

    /**
     * Gets the HTTP parameter that is used to submit the password.
     *
     * @return the HTTP parameter that is used to submit the password
     */
    String getPasswordParameter() {
        return usernamePasswordFilter.getPasswordParameter();
    }
}
